#!/bin/bash

component=$1
version=$2
steps=1
steps_complete=0
last_tag=$(git describe  --abbrev=0 | sed 's/\(.*\)-\(.*\)\.\(.*\)/\3/')
last_version=$(git describe  --abbrev=0 | sed 's/\(.*\)-\(.*\)\.\(.*\)/\2/')
new_tag=$(echo "$(($last_tag + 1))")

# Check if the input parameters (component version) were provided
test_parameters () {
	if [ -n "$1" ]; then
		echo "Component: $component"
	else
		currentdir=${PWD##*/}
		read -p "Specify a component (Default: '$currentdir') " new_component
		if [ "$new_component" = "" ]; then
			component="$(echo "$currentdir")"
			echo "Component: $component"
		else
			component="$(echo "$new_component")"
			echo "Component: $component"
		fi
	fi

	if [ -n "$2" ]; then
		echo "Version: $version"
	else
		read -p "Specify a version (Default: $last_version.$new_tag): " new_version
		if [ "$new_version" = "" ]; then
			version="$(echo "$last_version.$new_tag")"
			echo "Version: $version"
		else
			if [ "$(git tag | grep -c $version\$)" = "1" ]; then
				read -n 1 -p "Warning: The version you specified ('$version') exists as a git tag. Do you really want to release again?"
			else
				version="$(echo "$new_version")"
				echo "Version: $version"
			fi
		fi
	fi
}

# Print the step info
step () {
	printf "\n\n \e[1mStep $steps: $1\e[0m\n ==================\n"
}

# Just pause for user confirmation
get_on_with_it () {
	read -n 1 -p " → Done?"
	let steps++
	let steps_complete++
}

# Ask whether the step should be executed
run_command () {
	let steps++
	read -n 1 -p " → Do it? ([y]es, [n]o, [s]kip)" response
	printf "\n"
	if [ "$response" = "y" ]; then
		eval $1 && eval $2 && eval $3
		printf "\n ✓ Done."
		let steps_complete++
	elif [ "$response" = "s" ]; then
		printf "\n Step $(( $steps - 1 )) skipped."
		return
	else
		read -n 1 -p " Step $(( $steps - 1 )) aborted. Do you really want to quit? ([y]es, [n]o)" abort
		if [ "$abort" = "y" ]; then
			printf "\n Aborted. (Steps complete: $steps_complete)\n"
        		exit 0
		else
			printf "\n Step $(( $steps - 1 )) aborted. Continuing...\n"
			return
		fi
	fi
}

# If xclip is available we copy the hash to the user's clipboard (for the release manager)
get_sha1_hash () {
	SHA1=$(sha1sum $component-$version.tar.bz2 | cut -d ' ' -f 1)
	if [ -x "$(command -v xclip)" ]; then
		echo $SHA1 | xclip -selection c
		echo $SHA1
	else
		printf "Could not copy the hash to the clipboard, please install xclip for this step. Here's the hash:\n$SHA1\n\n"
		get_on_with_it
	fi
}

# Playbook for all release steps
run_steps () {
	step "Update configure.ac.in \e[0m(add new version and remove git tag)"
	get_on_with_it

	step "Update NEWS file with changelog? \e[0m(xfce-update-news)"
	run_command "xfce-update-news $component $version"

	step "Build the tarball \e[0m(./autogen.sh && make distcheck)"
	run_command "./autogen.sh" "make distcheck"

	step "Commit the changes \e[0m(git add -u; git commit -m 'Updates for release')"
	run_command "git add -u" "git commit -m 'Updates for release'"

	step "Tag the version \e[0m(git tag -a $component-$version)"
	run_command "git tag -a $component-$version"

	step "Push your changes \e[0m(git push && git push --tags)"
	run_command "git push" "git push --tags"

	step "Run sha1sum $component-$version.tar.bz2 and copy hash to clipboard"
	get_sha1_hash

	step "Log in to the release manager \e[0m(https://releases.xfce.org/)"
	run_command "exo-open 'https://releases.xfce.org/'"

	step "Click on 'Release New Version' \e[0m(https://releases.xfce.org/project/$component/new-release)"
	run_command "exo-open 'https://releases.xfce.org/project/$component/new-release'"

	step "Add the git back to version_tag() in configure.ac.in"
	get_on_with_it

	step "Commit and push the change \e[0m(git add -u; git commit -m 'Back to development'; git push)"
	run_command "git add -u" "git commit -m 'Back to development'" "git push"

	step "Add the version to the bugzilla component \e[0m(https://bugzilla.xfce.org/editversions.cgi?action=add&product=$component)"
	run_command "exo-open 'https://bugzilla.xfce.org/editversions.cgi?action=add&product=$component'"
}

### Main loop

main () {
	test_parameters $component $version
	run_steps

	printf "\nCongrats, you completed $steps_complete of $steps steps of doing a release for Xfce!\n"
}

main
